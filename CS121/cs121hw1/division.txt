-- [Problem 1a]

-- The expression
(PI[R MINUS S](r) TIMES s);
-- generates all possible combinations of r and s.

-- However, given that tofu isn't included in s, combinations including tofu
-- won't be included in the expression. Then when the expression
PI[R MINUS S, S](r);
-- which represents the actual data in r (thus including the tofu entry) is
-- used to take a set difference, the tofu is irrelevant since it's not
-- included in the expression that's having its difference taken.
-- So for the rest of the evaluation of the relational division operation,
-- it's as if the tofu entry wasn't in the monkey_likes relation to begin with.
-- So because Guenter has tuples with each of the food elements in monkey_foods,
-- Guenter will appear in the result.


-- [Problem 1b]

r DIVIDE s MINUS (PI[R MINUS S](r MINUS PI[R MINUS S](r) TIMES s));

-- My definition works by identifying all of the "legal" tuples of R-S and S:
PI[R MINUS S](r) TIMES s;
-- and then subtracting that from r to find all "illegal" tuples like the tofu:
(r MINUS PI[R MINUS S](r) TIMES s);
-- and then using the project operation to identify all of the false positives
-- left over from the original definition of relational division:
(PI[R MINUS S](r MINUS PI[R MINUS S](r) TIMES s));
-- And then subtracting that from the original definition of relational division
-- to remove all of the false positives and be left with the exact division:
r DIVIDE s MINUS (PI[R MINUS S](r MINUS PI[R MINUS S](r) TIMES s));

-- [Problem 1c]
-- IMPORTANT NOTE - it looks like ra2html.pyz doesn't allow for the arguments
-- of aggregate functions like count() to be uppercase (since they're supposed
-- to be attribute names which are supposed to be lowercase) so in those cases
-- I'm going to use sAttribs instead of S and rAttribs instead of R. Sorry for
-- the confusion but I don't think ra2html.pyz will accept this code otherwise.
--
-- It also appears that GROUP won't allow for an expression involving MINUS
-- in the [ ] block before it. So I'm going to use rMinusS to represent
-- R MINUS S.

PI[R MINUS S]( SIGMA[s2 = s3]( [rMinusS]GROUP[count(sAttribs) AS s2](
  r BOWTIE s) TIMES GROUP[count(sAttribs) AS s3](s)));

-- First we count the number of tuples with values for S that match the values
-- in s:
[rMinusS]GROUP[count(sAttribs) AS s2](r BOWTIE s);
-- Then we match each tuple with the "correct" number of tuples it should have,
-- based on s:
[rMinusS]GROUP[count(sAttribs) AS s2](r BOWTIE s) TIMES GROUP[
  count(sAttribs) AS s3](s);
-- Then we keep only the names that have equal numbers of expected tuples and
-- actual tuples:
PI[R MINUS S]( SIGMA[s2 = s3]( [rMinusS]GROUP[count(sAttribs) AS s2](
  r BOWTIE s) TIMES GROUP[count(sAttribs) AS s3](s)));
